---
- name: Create group
  group:
    # name: "{{ user_account.name }}"
    name: docker
    state: "{{state_value}}"
  become: yes
  # when: "'root' in whoami.stdout"

- name: append user  
  user:
    name: "{{ user_account.name }}"
    groups: docker
    append: yes
  become: yes

- name: newgrp docker
  # command: "kubeadm version --output yaml '|grep gitVersion'"
  shell: newgrp docker

# - name: "{{user_account.path}}/.docker"
#   file:
#     state: directory
#     path: "{{user_account.path}}/.docker"
#     owner: "{{user_account.name}}"
#     groups: "docker"
#     mode: "0775"
  

# - name: apt | Downgrade 'docker-ce', 'docker-ce-cli', 'containerd.io', 'docker-compose-plugin','docker-engine'
#   apt:
#     name: ['cgroupfs-mount','cgroup-lite','docker-ce', 'docker-ce-cli', 'containerd.io', 'docker-compose-plugin','docker-engine']
#     # force: yes
#     state: absent
#     # force_apt_get: yes
#     autoremove: yes
#     purge: yes
#     autoclean: yes
#   # ignore_errors: True
#   register: apt_result
#   when: "'docker.version' not in 'apt_check_result.stdount'"
#   # with_items:
#   #   - docker
#   #   - docker-engine 
#   #   - docker.io
#   #   - containerd
#   #   - runc
# - debug:
#     msg: "{{apt_result}}" 

# - name: remove /etc/docker/daemon.json
#   file:
#     state: absent
#     path: /etc/docker/daemon.json
#   register: daemon_json

# - debug:
#     msg: "{{daemon_json}}"

# - name: remove /lib/systemd/system/docker.service
#   file:
#     state: absent
#     path: /lib/systemd/system/docker.service
#   register: service_docker

# - debug:
#     msg: "{{service_docker}}"

# - name: remove /var/lib/docker
#   file:
#     state: absent
#     path: /var/lib/docker
#   register: var_lib_docker

# - debug:
#     msg: "{{var_lib_docker}}"

# - name: remove /lib/systemd/system/docker.service
#   file:
#     state: absent
#     path: /lib/systemd/system/docker.service
#   register: docker_service

# - debug:
#     msg: "{{docker_service}}"

# - name: remove /var/lib/containerd
#   file:
#     state: absent
#     path: /var/lib/containerd
#   register: var_lib_containerd

# - debug:
#     msg: "{{var_lib_containerd}}"

# - name: Doownload get-docker
#   get_url:
#     url: https://get.docker.com
#     dest: /home/ubuntu/get-docker.sh
#     mode: 0755
#   register: download_getdocker
# - debug:
#     msg: "{{download_getdocker}}"

# - name: run getdocker.sh
#   command: "/home/ubuntu/get-docker.sh"
#   register: result
# - debug:
#     msg: "{{result}}"


- name: Prepare docker expose args for service
  set_fact:
    dockerd_extra_args: "{{ ', \"hosts\": [ \"fd://\", \"tcp://0.0.0.0:2375\"]' if docker.expose_tcp else '' }}"

- name: Replace the startup command for Docker
  lineinfile: 
    dest: /lib/systemd/system/docker.service
    regexp: '^ExecStart'
    line: 'ExecStart=/usr/bin/dockerd'
    state: "{{state_value}}"
  become: yes
  # register: result_service

# - name: Reload systemd when service definition changed
#   command: systemctl daemon-reload
- name: Notify Docker service right now to stop
  meta: flush_handlers

- name: Disable docker.service 
  command: systemctl disable --now docker.service docker.socket
  become: yes

# - name: Update docker service startup
#   template: 
#     src: docker_daemon.json 
#     dest: /etc/docker/daemon.json
#   become: yes
#   register: result
  # notify:
  # - restart docker

- name: Check rootless
  shell: >
    echo $DOCKER_HOST |wc -l
  register: result

- debug:
    msg: "{{result}}"
- name: dockerd-rootless-setuptool.sh install --force
  command: dockerd-rootless-setuptool.sh install --force
  # command: whoami
  # become_user: "{{user_account.name}}"
  # become_method: sudo
  when: "'0' == result.stdout"
  register: rootless_status

- debug:
    msg: "{{rootless_status}}"

- debug:
    msg: "updating {{bashrc.stat.path}}"

# - name: update {{bashrc.stat.path}}
#   lineinfile: 
#     dest: "{{bashrc.stat.path}}"
#     regexp: '{{item}}'
#     line: "{{item}}"
#     state: "{{state_value}}"
#   with_items: "{{docker.user_env_vars}}"
  

# - name: load bashrc
#   command: loginctl enable-linger "{{user_account.name}}"
#   become: True
#   become_method: sudo

# - name: systemctl enable docker.service docker.socket
#   command: systemctl enable --user docker.service docker.socket

# - name: systemctl enable containerd.service
#   command: systemctl enable containerd.service

# - name: Reload systemd when service definition changed
#   command: systemctl daemon-reload
#   # when: result_service.failed == false
# - name: systemctl start  docker.service
#   command: systemctl --user start docker.service docker.socket
#   become_user: "{{user_account.name}}"
#   become_method: sudo

# - name: Notify Docker service right now to restart
#   meta: flush_handlers


- name: Wait for server to restart
  reboot:
    reboot_timeout: 3600
  become: True